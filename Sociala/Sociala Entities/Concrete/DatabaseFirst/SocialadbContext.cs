// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Sociala_Entities.Concrete.DatabaseFirst
{
    public partial class SocialadbContext : DbContext
    {
        public SocialadbContext()
        {
        }

        public SocialadbContext(DbContextOptions<SocialadbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Friend> Friend { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<NotificationReceiver> NotificationReceiver { get; set; }
        public virtual DbSet<NotificationSender> NotificationSender { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<PostandTag> PostandTag { get; set; }
        public virtual DbSet<Reaction> Reaction { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<User> User { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string connection = @"Data Source=DESKTOP-JGUKKG5;Initial Catalog=SocialaDb;User ID=sa;Password=admin1234; Integrated Security=True; ApplicationIntent=ReadWrite; MultipleActiveResultSets = True; Trusted_Connection=True;";
            optionsBuilder.UseSqlServer(connection);
        }
        public override int SaveChanges()
        {
            try
            {
                return base.SaveChanges();
            }
            //catch (DbEntityValidationException vex)
            //{
            //    var exception = HandleDbEntityValidationException(vex);
            //    throw exception;
            //}
            catch (DbUpdateException dbu)
            {
                var exception = HandleDbUpdateException(dbu);
                Debug.WriteLine(exception.Message.ToString());

                throw exception;

            }
        }

        private Exception HandleDbUpdateException(DbUpdateException dbu)
        {
            var builder = new StringBuilder("A DbUpdateException was caught while saving changes. ");

            try
            {
                foreach (var result in dbu.Entries)
                {
                    builder.AppendFormat("Type: {0} was part of the problem.", result.Entity.GetType().FullName);
                }
            }
            catch (Exception e)
            {
                builder.Append("Error parsing DbUpdateException: " + e.ToString());
            }

            string message = builder.ToString();
            return new Exception(message, dbu);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentDate).IsRequired();

                entity.Property(e => e.CommentMessage).IsRequired();

                entity.Property(e => e.PostIdForComment).HasColumnName("PostId_forComment");

                entity.Property(e => e.UserIdForComment).HasColumnName("UserId_forComment");

                entity.HasOne(d => d.PostIdForCommentNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.PostIdForComment)
                    .HasConstraintName("FK_PostId_forComment");

                entity.HasOne(d => d.UserIdForCommentNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.UserIdForComment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserId_forComment");
            });

            modelBuilder.Entity<Friend>(entity =>
            {
                entity.Property(e => e.FriendName).IsRequired();

                entity.Property(e => e.UserIdForFriend).HasColumnName("UserId_forFriend");

                entity.HasOne(d => d.UserIdForFriendNavigation)
                    .WithMany(p => p.Friend)
                    .HasForeignKey(d => d.UserIdForFriend)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserId_forFriend");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.Property(e => e.MessageDate).IsRequired();

                entity.Property(e => e.MessageText).IsRequired();

                entity.HasOne(d => d.ReceiverUser)
                    .WithMany(p => p.MessageReceiverUser)
                    .HasForeignKey(d => d.ReceiverUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReceiverUserId_forFriend");

                entity.HasOne(d => d.SenderUser)
                    .WithMany(p => p.MessageSenderUser)
                    .HasForeignKey(d => d.SenderUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SenderUserId_forFriend");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.NotificationReceiverIdForNotification).HasColumnName("NotificationReceiverId_forNotification");

                entity.Property(e => e.NotificationSenderIdForNotification).HasColumnName("NotificationSenderId_forNotification");

                entity.HasOne(d => d.NotificationReceiverIdForNotificationNavigation)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.NotificationReceiverIdForNotification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationReceiver");

                entity.HasOne(d => d.NotificationSenderIdForNotificationNavigation)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.NotificationSenderIdForNotification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationSender");
            });

            modelBuilder.Entity<NotificationReceiver>(entity =>
            {
                entity.Property(e => e.NotificationDate).IsRequired();

                entity.Property(e => e.NotificationMessage).IsRequired();

                entity.Property(e => e.UserIdForNotificationLineAsReceiver).HasColumnName("UserId_forNotificationLine_asReceiver");

                entity.HasOne(d => d.UserIdForNotificationLineAsReceiverNavigation)
                    .WithMany(p => p.NotificationReceiver)
                    .HasForeignKey(d => d.UserIdForNotificationLineAsReceiver)
                    .HasConstraintName("FK_UserId_forNotification_asReceiver");
            });

            modelBuilder.Entity<NotificationSender>(entity =>
            {
                entity.Property(e => e.NotificationDate).IsRequired();

                entity.Property(e => e.NotificationMessage).IsRequired();

                entity.Property(e => e.UserIdForNotificationLineAsSender).HasColumnName("UserId_forNotificationLine_asSender");

                entity.HasOne(d => d.UserIdForNotificationLineAsSenderNavigation)
                    .WithMany(p => p.NotificationSender)
                    .HasForeignKey(d => d.UserIdForNotificationLineAsSender)
                    .HasConstraintName("FK_UserId_forNotification_asSender");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.PostDate).IsRequired();

                entity.Property(e => e.UserIdForPost).HasColumnName("UserId_forPost");

                entity.HasOne(d => d.UserIdForPostNavigation)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.UserIdForPost)
                    .HasConstraintName("FK_UserId_forPost");
            });

            modelBuilder.Entity<PostandTag>(entity =>
            {
                entity.Property(e => e.PostIdForPostandTag).HasColumnName("PostId_forPostandTag");

                entity.Property(e => e.TagIdForPostandTag).HasColumnName("TagId_forPostandTag");

                entity.HasOne(d => d.PostIdForPostandTagNavigation)
                    .WithMany(p => p.PostandTag)
                    .HasForeignKey(d => d.PostIdForPostandTag)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PostId_forPostandTag");

                entity.HasOne(d => d.TagIdForPostandTagNavigation)
                    .WithMany(p => p.PostandTag)
                    .HasForeignKey(d => d.TagIdForPostandTag)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("TagId_forPostandTag");
            });

            modelBuilder.Entity<Reaction>(entity =>
            {
                entity.Property(e => e.PostIdForReaction).HasColumnName("PostId_forReaction");

                entity.Property(e => e.Reaction1).HasColumnName("Reaction_1");

                entity.Property(e => e.Reaction2).HasColumnName("Reaction_2");

                entity.Property(e => e.Reaction3).HasColumnName("Reaction_3");

                entity.Property(e => e.Reaction4).HasColumnName("Reaction_4");

                entity.Property(e => e.Reaction5).HasColumnName("Reaction_5");

                entity.Property(e => e.Reaction6).HasColumnName("Reaction_6");

                entity.Property(e => e.Reaction7).HasColumnName("Reaction_7");

                entity.Property(e => e.Reaction8).HasColumnName("Reaction_8");

                entity.Property(e => e.UserIdForReaction).HasColumnName("UserId_forReaction");

                entity.HasOne(d => d.PostIdForReactionNavigation)
                    .WithMany(p => p.Reaction)
                    .HasForeignKey(d => d.PostIdForReaction)
                    .HasConstraintName("FK_PostId_forReactions");

                entity.HasOne(d => d.UserIdForReactionNavigation)
                    .WithMany(p => p.Reaction)
                    .HasForeignKey(d => d.UserIdForReaction)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserId_forReaction");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.ConfirmPassword).IsRequired();

                entity.Property(e => e.EmailAddress).IsRequired();

                entity.Property(e => e.Password).IsRequired();

                entity.Property(e => e.UserFilepath).IsRequired();

                entity.Property(e => e.UserOnlineDate).IsRequired();

                entity.Property(e => e.Username).IsRequired();
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}